:q
read "proc hoge x y z" :: Expr
read "prec hoge x y z" :: Expr
:r
read "prec hoge x y z" :: Expr
read "proc hoge x y z" :: Expr
:r
hogeR "hoge"
hogeR 0 "hoge"
hogeR = readP_to_S idenR 
read "proc hoge x y z" :: Expr
:r
read "proc hoge x y z" :: Expr
:l src/Syntax.hs
:q
sample1
:r
showExpr sample1
:r
:r
:r
:r
:r
:r
:r
:l src/Syntax.hs
dispPict (last (accumWorld (eval defaultWorld)))
:l src/World.hs
dispPict (last (accumWorld (eval defaultWorld)))
:l src/World.hs
dispPict (last (accumWorld (eval defaultWorld)))
:l src/World.hs
dispPict (last (accumWorld (eval defaultWorld)))
:l src/World.hs
dispPict (last (accumWorld (eval defaultWorld)))
:r
:r
:l src/World.hs
dispPict (last (accumWorld (eval defaultWorld)))
dispWorld (last (accumWorld (eval defaultWorld)))
:l src/World.hs
dispWorld (last (eval defaultWorld))
displayWorld (last (eval defaultWorld))
:r
:l src/World.hs
:l src/World.hs
:l src/World.hs
dispWorld (fd 100 (lt 60 (fd 200 defaultWorld)))
:l src/World.hs
dispWorld (fd 200 defaultWorld)
:l src/World.hs
dispWorld (World.arc 120 100 defaultWorld)
:l src/World.hs
dispWorld (World.arc 120 100 defaultWorld)
:l src/World.hs
dispWorld (World.arc 120 100 defaultWorld)
:l src/World.hs
dispWorld (World.arc 120 100 defaultWorld)
dispWorld (arc 120 100 defaultWorld)
:l src/World.hs
:q
:r
dispWorld (arc 120 100 defaultWorld)
:r
:l src/World.hs
display FullScreen white test
test = thickArc 30 90 100 10
:l src/World.hs
:q
:r
:r
:r
:t uncurry
:r
:r
:l src/World.hs
dispWorld (fd 200 defaultWorld )
:r
:l src/World.hs
